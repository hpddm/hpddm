name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  main:
    strategy:
      matrix:
        compiler: [ gcc, clang ]
    runs-on: ubuntu-22.04
    if: "!contains(github.event.head_commit.message, '[ci skip]')"
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Cache dependencies
      uses: actions/cache@v3
      id: cache-dependencies
      with:
        path: "~/.cache"
        key: dependencies-v1
    - name: Install dependencies
      env:
        CACHE_HIT: ${{ steps.cache-dependencies.outputs.cache-hit }}
        PKGS: "clang clang-14 ibverbs-providers lcov libarpack2 libarpack2-dev                \
               libcaf-openmpi-3 libclang-common-14-dev libclang-cpp14 libclang1-14            \
               libcoarrays-dev libcoarrays-openmpi-dev libcombblas1.16.0 libevent-2.1-7       \
               libevent-dev libevent-extra-2.1-7 libevent-openssl-2.1-7 libfabric1            \
               libgd-perl libhwloc-dev libhwloc-plugins libhwloc15 libhypre-2.22.1            \
               libhypre-dev libibverbs-dev libibverbs1 libjs-jquery-ui libllvm14              \
               libmetis-dev libmetis5 libmumps-5.4 libmumps-dev libmumps-headers-dev          \
               libnl-3-dev libnl-route-3-200 libnl-route-3-dev libnuma-dev libomp-14-dev      \
               libomp-dev libomp5-14 libopenmpi-dev libopenmpi3 libparmetis-dev               \
               libparmetis4.0 libpciaccess0 libperlio-gzip-perl libpmix-dev libpmix2          \
               libpsm-infinipath1 libpsm2-2 libptscotch-6.1 librdmacm1 libscalapack-mpi-dev   \
               libscalapack-openmpi-dev libscalapack-openmpi2.1 libsuperlu-dev                \
               libsuperlu-dist7 libsuperlu5 libucx0 libxnvctrl0 llvm-14 llvm-14-dev           \
               llvm-14-linker-tools llvm-14-runtime llvm-14-tools mpi-default-bin             \
               mpi-default-dev ocl-icd-libopencl1 openmpi-bin openmpi-common"
      run: |
        if [[ "$CACHE_HIT" == "true" ]]; then
          mkdir -p ~/.local/lib
          mv ~/.cache/lib/python3* ~/.local/lib
          sudo cp --force --recursive ~/.cache/lib/* /lib
          rm -rf ~/.cache/lib
          sudo cp --force --recursive ~/.cache/* /
          sudo update-alternatives --install /usr/lib/x86_64-linux-gnu/libpsm_infinipath.so.1 libpsm_infinipath.so.1 /usr/lib/libpsm1/libpsm_infinipath.so.1.16 0
          sudo mkdir -p /usr/include/clang/14.0.0
          sudo ln -s /usr/include/clang/14.0.0/../../../lib/llvm-14/lib/clang/14.0.0/include /usr/include/clang/14.0.0/include
          sudo mkdir -p /usr/lib/x86_64-linux-gnu/openmpi/lib/fortran/
          sudo ln -s /usr/lib/x86_64-linux-gnu/openmpi/lib/ /usr/lib/x86_64-linux-gnu/openmpi/lib/fortran/gfortran
        else
          sudo apt-get update && sudo apt-get install -yq `echo $PKGS`
          mkdir -p ~/.cache
          for pkg in `echo $PKGS`; do
              for dep in $pkg; do
                  dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/.cache/
              done
          done
          pip install --user mpi4py numpy scipy
          rm -rf ~/.cache/pip
          cp -R ~/.local/lib ~/.cache
          find ~/.cache -type d \( -wholename "*/share/doc/*" -o -wholename "*/share/man/*" -o -wholename "*/tests" -o -wholename "*/javascript" \) -prune -exec rm -rf "{}" \;
        fi
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-11 0
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 0
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-14/bin/clang++ 0
        sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-14/bin/clang 0
        sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-11 0
        sudo update-alternatives --set g++ /usr/bin/g++-11
        sudo update-alternatives --set gcc /usr/bin/gcc-11
        sudo update-alternatives --set clang++ /usr/lib/llvm-14/bin/clang++
        sudo update-alternatives --set clang /usr/lib/llvm-14/bin/clang
        sudo update-alternatives --set gfortran /usr/bin/gfortran-11
    - name: Fetch PETSc and data files
      run: |
        export BRANCH=`git ls-remote --heads https://gitlab.com/petsc/petsc.git "refs/heads/jolivet/*-ci" | tail -n 1 | cut -d'/' -f3-`
        if [ "$BRANCH" = "" ]; then export BRANCH="main"; fi
        cd .. && git clone --depth 1 -b ${BRANCH} --single-branch https://gitlab.com/petsc/petsc.git && cd petsc
        diff src/ksp/ksp/impls/hpddm/hpddm.cxx ../${{ github.event.repository.name }}/interface/petsc/ksp/hpddm.cxx || (echo KSPHPDDM source file has diverged; exit 1)
        diff --suppress-common-lines -y src/ksp/pc/impls/hpddm/hpddm.cxx ../${{ github.event.repository.name }}/interface/petsc/pc/hpddm.cxx | sed '/LCOV_/d' | if [ $(wc -c) -gt "0" ]; then echo PCHPDDM source file has diverged; exit 1; fi
        wget -nv http://joliv.et/petsc_datafiles.tar.gz && tar xzf petsc_datafiles.tar.gz
    - name: Build and test with MUMPS and single-precision complex scalars
      env:
        CC: ${{ matrix.compiler }}
      run: |
        if [ "$CC" = "clang" ]; then
          export OMPI_CC=clang && export OMPI_CXX=clang++;
          echo -e "MPICXX ?= mpicxx.openmpi \nMPICC ?= mpicc.openmpi\nMPIF90 ?= mpif90.openmpi\n" | cat - Make.inc/Makefile.Actions > Makefile.inc
        else
          echo -e "MPICXX ?= mpicxx.openmpi -fprofile-arcs -ftest-coverage\nMPICC ?= mpicc.openmpi -fprofile-arcs -ftest-coverage\nMPIF90 ?= mpif90.openmpi -fprofile-arcs -ftest-coverage" | cat - Make.inc/Makefile.Actions > Makefile.inc
        fi
        export HPDDMFLAGS="-DFORCE_SINGLE -DFORCE_COMPLEX"
        make python
        make test_c test_cpp test_python
        if [ "$CC" = "gcc" ]; then
          lcov --directory . --capture --output-file coverage1.info
        fi
        make clean
    - name: Build and test with BoomerAMG
      env:
        CC: ${{ matrix.compiler }}
      run: |
        if [ "$CC" = "clang" ]; then export OMPI_CC=clang && export OMPI_CXX=clang++; fi
        export HPDDMFLAGS="-DGENERAL_CO -DHPDDM_NUMBERING=\'F\'"
        export SOLVER=HYPRE
        make python
        make test_c test_cpp test_python test_bin/driver test_bin/custom_operator_c test_bin/schwarzFromFile_cpp
        if [ "$CC" = "gcc" ]; then
          export OMPI_FC=gfortran
          make test_fortran
        fi
        if [ "$CC" = "gcc" ]; then
          lcov --directory . --capture --output-file coverage2.info
        fi
        make clean
    - name: Build and test with mixed-precision arithmetic
      env:
        CC: ${{ matrix.compiler }}
      run: |
        if [ "$CC" = "clang" ]; then export OMPI_CC=clang && export OMPI_CXX=clang++; fi
        export HPDDMFLAGS="-DHPDDM_NUMBERING=\'F\' -DHPDDM_MIXED_PRECISION=1"
        make test_cpp
        if [ "$CC" = "gcc" ]; then
          lcov --directory . --capture --output-file coverage3.info
        fi
        make clean
      if: matrix.compiler == 'gcc'
    - name: Configure vanilla PETSc with external packages
      run: |
        cd ../petsc
        ./configure --with-x=0 --with-cc=mpicc.openmpi --with-cxx=0 --with-fc=mpif90.openmpi --with-fortran-bindings=0 --with-c2html=0 --download-f2cblaslapack --with-f2cblaslapack-float128-bindings --with-debugging=0 --with-scalapack-lib=/usr/lib/x86_64-linux-gnu/libscalapack-openmpi.so --with-metis-include=/usr/include --with-metis-lib=/usr/lib/x86_64-linux-gnu/libmetis.so --with-parmetis-include=/usr/include --with-parmetis-lib=/usr/lib/libparmetis.so --download-mumps --with-hwloc-include=/usr/include --with-hwloc-lib=/usr/lib/x86_64-linux-gnu/libhwloc.so --with-openmp FOPTFLAGS="-g0 -O3" COPTFLAGS="-g0 -O3" PETSC_ARCH=arch-packages
      if: matrix.compiler == 'gcc'
    - name: Build and test with PETSc and SLEPc
      env:
        CC: ${{ matrix.compiler }}
      run: |
        if [ "$CC" = "clang" ]; then export OMPI_CC=clang && export OMPI_CXX=clang++;
        else export COVERAGE_FLAGS="-fprofile-arcs -ftest-coverage"; fi
        cd ../petsc
        export REPOSITORY_NAME=${{ github.event.repository.name }}
        bash ../${REPOSITORY_NAME}/.github/workflows/aldaas2021robust.sh
        export PETSC_DIR=${PWD} && export DATAFILESPATH=${PWD}/datafiles
        export PETSC_ARCH=arch-ci
        export TYPE=double
        export INT64=0
        export SUBSOLVER=PETSC
        export LD_LIBRARY_PATH_0=${LD_LIBRARY_PATH}
        sed -i -e 's=$(PETSC_COMPILE.cxx) $(abspath $<) -o $@=$(PETSC_COMPILE.cxx) $(subst impls/hpddm/,,$(subst petsc/src/ksp,'"${REPOSITORY_NAME}"'/interface/petsc,$(abspath $<))) -o $(subst impls/hpddm/,,$(subst obj/ksp,../../'"${REPOSITORY_NAME}"'/interface/petsc,$@))=;s=$(call quiet,CLINKER) $(sl_linker_args) -o $@ $^ $(PETSC_EXTERNAL_LIB_BASIC)=$(call quiet,CLINKER) $(sl_linker_args) -o $@ $(filter-out %/hpddm/hpddm.o,$^) $(subst impls/hpddm/,,$(subst obj/ksp,../../'"${REPOSITORY_NAME}"'/interface/petsc,$(filter %/hpddm/hpddm.o,$^))) $(PETSC_EXTERNAL_LIB_BASIC)=;s=$(SHARED_RECIPE_ATFILE)=$(SHARED_RECIPE_DEFAULT)=' gmakefile
        sed -i -e 's=starttime: pre-clean $(libpetscall)=starttime: pre-clean=;s=$(testexe.c) $(testexe.cu) : $(TESTDIR)/% : $(TESTDIR)/%.o $$^ $(libpetscall)=$(testexe.c) $(testexe.cu) : $(TESTDIR)/% : $(TESTDIR)/%.o $$^=;s=$(call quiet,CLINKER) $(EXEFLAGS) -o $@ $^ $(PETSC_TEST_LIB=$(call quiet,CLINKER) $(EXEFLAGS) -o $@ $^ $(libpetscall) $(PETSC_TEST_LIB=g' gmakefile.test
        for PRECISION in single double __float128
        do
          for TYPE in complex real
          do
            for INT64 in 1 0
            do
              if [ "$INT64" = "1" ] && { { [ "$TYPE" = "complex" ] && [ "$PRECISION" = "double" ]; } || { [ "$TYPE" = "real" ] && [ "$PRECISION" = "single" ]; } }; then continue; fi
              if [ "$PRECISION" = "__float128" ] && { { [ "$TYPE" = "complex" ] || [ "$INT64" = "1" ]; } || [ "$CC" != "gcc" ]; }; then continue; fi
              unset HPDDMFLAGS
              unset EXTERNALPACKAGES
              export CXXPPFLAGS="-Wall -Wextra -Wpedantic -Wno-c99-extensions -Wno-sign-compare -Wno-unused-parameter -Wno-cast-function-type -Wno-implicit-fallthrough -Wno-unknown-warning-option"
              if [ "$PRECISION" != "__float128" ]; then
                export EXTERNALPACKAGES="--with-scalapack-lib=/usr/lib/x86_64-linux-gnu/libscalapack-openmpi.so"
                export CXXPPFLAGS="${CXXPPFLAGS} -Werror"
              fi
              if [ "$PRECISION" = "double" ]; then
                export EIGENSOLVER=SLEPC
              else
                unset EIGENSOLVER
              fi
              if [ "$INT64" = "0" ]; then
                if { [ "$PRECISION" == "single" ] || [ "$TYPE" != "real" ] || [ "$CC" != "gcc" ]; }; then export EXTERNALPACKAGES="${EXTERNALPACKAGES} --with-mumps-include=/usr/include --with-mumps-lib=[/usr/lib/x86_64-linux-gnu/libcmumps.so,/usr/lib/x86_64-linux-gnu/libdmumps.so,/usr/lib/x86_64-linux-gnu/libzmumps.so,/usr/lib/x86_64-linux-gnu/libsmumps.so,/usr/lib/x86_64-linux-gnu/libpord.so,/usr/lib/x86_64-linux-gnu/libmumps_common.so]"; fi
                if [ "$PRECISION" = "double" ]; then
                  export EXTERNALPACKAGES="${EXTERNALPACKAGES} --with-metis-include=/usr/include --with-metis-lib=/usr/lib/x86_64-linux-gnu/libmetis.so --with-parmetis-include=/usr/include --with-parmetis-lib=/usr/lib/libparmetis.so --download-htool"
                  if [ "$TYPE" = "real" ]; then
                    export EXTERNALPACKAGES="${EXTERNALPACKAGES} --download-triangle --download-suitesparse"
                    if [ "$CC" = "gcc" ]; then export EXTERNALPACKAGES="${EXTERNALPACKAGES} --with-mumps-dir=arch-packages --with-hwloc-include=/usr/include --with-hwloc-lib=/usr/lib/x86_64-linux-gnu/libhwloc.so --with-openmp"; fi
                  fi
                fi
                if { [ "$CC" = "gcc" ] && [ "$TYPE" = "real" ]; } && { [ "$PRECISION" = "double" ] || [ "$PRECISION" = "__float128" ]; }; then export EXTERNALPACKAGES="${EXTERNALPACKAGES} --with-f2cblaslapack-dir=`pwd`/arch-packages LDFLAGS=-L`pwd`/arch-packages/lib"; fi
              fi
              ./configure --with-x=0 --with-fortran-bindings=0 --with-cc=mpicc.openmpi --with-cxx=mpicxx.openmpi --with-fc=mpif90.openmpi --with-mpiexec=mpirun.openmpi --with-x=0 --download-slepc --download-hpddm=../${REPOSITORY_NAME} --download-hpddm-commit=HEAD 'CXXPPFLAGS=${CXXPPFLAGS}' --with-64-bit-indices=${INT64} --with-scalar-type=${TYPE} --with-precision=${PRECISION} ${EXTERNALPACKAGES} || (cat ${PETSC_ARCH}/lib/petsc/conf/configure.log 2> /dev/null; exit 1)
              [ -z "`diff -rq ${PETSC_ARCH}/include ../${REPOSITORY_NAME}/include | grep -v Only`" ] || exit 1
              INCS="-I`pwd`/../`echo ${REPOSITORY_NAME}`/include"
              rm -rf ${PETSC_ARCH}/include/HPDDM* && sed -i -e 's@petsc/arch-ci/externalpackages/git.hpddm@${REPOSITORY_NAME}@g' -e 's@hpddm_petsc.cpp@hpddm_petsc.cpp ${COVERAGE_FLAGS} -I`pwd`/../`echo ${REPOSITORY_NAME}`/include@' ${PETSC_ARCH}/lib/petsc/conf/petscrules
              if [ "$INT64" = "0" ] && [ "$TYPE" = "real" ] && [ "$PRECISION" = "double" ] && [ "$CC" = "gcc" ]; then
                make all "CXX=mpicxx.openmpi `echo ${COVERAGE_FLAGS}` `echo ${INCS}`" "CLINKER=mpicc.openmpi `echo ${COVERAGE_FLAGS}` -fopenmp" || (cat ${PETSC_ARCH}/externalpackages/git.slepc/${PETSC_ARCH}/lib/slepc/conf/configure.log 2> /dev/null; cat ${PETSC_ARCH}/lib/petsc/conf/hpddm.log 2> /dev/null; exit 1)
              else
                make all "CXX=mpicxx.openmpi `echo ${COVERAGE_FLAGS}` `echo ${INCS}`" "CLINKER=mpicc.openmpi `echo ${COVERAGE_FLAGS}`" || (cat ${PETSC_ARCH}/externalpackages/git.slepc/${PETSC_ARCH}/lib/slepc/conf/configure.log 2> /dev/null; cat ${PETSC_ARCH}/lib/petsc/conf/hpddm.log 2> /dev/null; exit 1)
              fi
              cat ${PETSC_ARCH}/lib/petsc/conf/hpddm.log
              make -f gmakefile test 'query=requires' 'queryval=*hpddm*' 'PETSCMPIEXEC=mpirun.openmpi --oversubscribe --mca btl_base_warn_component_unused 0' "CC=mpicc.openmpi `echo ${COVERAGE_FLAGS}`" "CLINKER=mpicc.openmpi `echo ${COVERAGE_FLAGS}`" TIMEOUT=120 EXTRA_OPTIONS='-malloc_dump' check-test-errors
              config/report_tests.py -t 5 -s
              if { [ "$PRECISION" = "double" ] && [ "$TYPE" = "real" ]; } && [ "$INT64" = "0" ]; then
                cd arch-ci/externalpackages/git.slepc
                mkdir -p arch-ci/tests
                echo 'echo eps_tests-test43_1 svd_tutorials-ex48_4_hpddm' > arch-ci/tests/echofailures.sh
                chmod u+x arch-ci/tests/echofailures.sh
                make -f gmakefile test test-fail='1' PETSC_ARCH=arch-ci PETSC_DIR=${PETSC_DIR} SLEPC_DIR=${PETSC_DIR}/${PETSC_ARCH}/externalpackages/git.slepc 'PETSCMPIEXEC=mpirun.openmpi --oversubscribe --mca btl_base_warn_component_unused 0' "CC=mpicc.openmpi `echo ${COVERAGE_FLAGS}`" "CLINKER=mpicc.openmpi `echo ${COVERAGE_FLAGS}`" EXTRA_OPTIONS='-malloc_dump' check-test-errors && cd ../../../
              fi
              if [ "$PRECISION" = "single" ]; then export HPDDMFLAGS="-DFORCE_SINGLE"; fi
              if [ "$TYPE" = "complex" ]; then export HPDDMFLAGS="${HPDDMFLAGS} -DFORCE_COMPLEX"; fi
              cd ../${REPOSITORY_NAME}
              export LD_LIBRARY_PATH=${LD_LIBRARY_PATH_0}:${PETSC_DIR}/${PETSC_ARCH}/lib
              if [ "$PRECISION" != "__float128" ]; then make cpp; fi
              if [ "$CC" = "gcc" ]; then
                if [ "$PRECISION" != "__float128" ]; then make test_cpp; fi
                lcov --directory . --directory ../petsc --capture --output-file coverage_${PRECISION}_${TYPE}_${INT64}.info
              fi
              make clean
              cd ../petsc && rm -rf ${PETSC_ARCH}
            done
          done
        done
    - name: Merge and upload coverage reports
      run: |
        find . -name "coverage*.info" -exec echo -a {} \; | xargs lcov -o coverage.info
        lcov --remove coverage.info '/usr/*' '*petsc/arch*' --output-file coverage.info
        bash <(curl -s https://codecov.io/bash) -f coverage.info;
      if: ${{ matrix.compiler == 'gcc' && github.event.repository.name == 'hpddm' }}
