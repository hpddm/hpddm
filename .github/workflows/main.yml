name: CI
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  variables:
    runs-on: ubuntu-latest
    outputs:
      petsc-branch: ${{ steps.petsc-branch.outputs.var }}
      hpddm-branch: ${{ steps.hpddm-branch-push.outputs.var }}${{ steps.hpddm-branch-pr.outputs.var }}
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v3
      - id: petsc-branch
        run: |
          export PETSC_BRANCH=`git ls-remote --heads https://gitlab.com/petsc/petsc.git "refs/heads/jolivet/*-ci" | tail -n 1 | cut -d'/' -f3-`
          if [ "$PETSC_BRANCH" = "" ]; then export PETSC_BRANCH="main"; fi
          echo "var=${PETSC_BRANCH}" >> $GITHUB_OUTPUT
      - id: hpddm-branch-push
        if: github.event_name != 'pull_request'
        shell: bash
        run: |
          echo "var=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT
      - id: hpddm-branch-pr
        if: github.event_name == 'pull_request'
        run: |
          echo "var=$(echo ${GITHUB_HEAD_REF})" >> $GITHUB_OUTPUT
      - name: Set matrix
        id: set-matrix
        run: |
          git fetch origin ${{ steps.hpddm-branch-push.outputs.var }}${{ steps.hpddm-branch-pr.outputs.var }}
          worker=`git show -s -b origin/${{ steps.hpddm-branch-push.outputs.var }}${{ steps.hpddm-branch-pr.outputs.var }} --format=%B | grep '\[runs-on: ' | sed 's/\[runs-on: \(.*\)\]/\1/g'`
          if [ "$worker" = "" ]; then
            worker=ubuntu-latest
          fi
          matrix=$(jq --arg worker "$worker" 'map(. | select(.runs_on == $worker))' <<< '[ { "runs_on":"ubuntu-latest" }, { "runs_on":"self-hosted" } ]')
          echo matrix={\"include\":$(echo $matrix)}\" >> $GITHUB_OUTPUT
  main:
    strategy:
      matrix:
        compiler: [ gcc, clang ]
    runs-on: ubuntu-22.04
    needs:
      - variables
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - uses: actions/cache@v3
      id: cache-dependencies
      with:
        path: "~/.cache"
        key: dependencies-v0
    - name: Install dependencies
      env:
        PKGS: "clang-15 ibverbs-providers lcov libarpack2 libarpack2-dev libcaf-openmpi-3     \
               libcoarrays-dev libcoarrays-openmpi-dev libcombblas1.16.0 libevent-2.1-7       \
               libevent-dev libevent-extra-2.1-7 libevent-openssl-2.1-7 libfabric1            \
               libgd-perl libhwloc-dev libhwloc-plugins libhwloc15 libhypre-2.22.1            \
               libhypre-dev libibverbs-dev libibverbs1 libjs-jquery-ui libmetis-dev           \
               libmetis5 libnl-3-dev libnl-route-3-200 libnl-route-3-dev libnuma-dev          \
               libllvm15 libclang-cpp15 libomp-15-dev libomp5-15 libopenmpi-dev libopenmpi3   \
               libparmetis-dev libparmetis4.0 libpciaccess0 libperlio-gzip-perl libpmix-dev   \
               libpmix2 libpsm-infinipath1 libpsm2-2 libptscotch-6.1 librdmacm1               \
               libscalapack-mpi-dev libscalapack-openmpi-dev libscalapack-openmpi2.1 libucx0  \
               libsuperlu-dev libsuperlu-dist7 libsuperlu5 libxnvctrl0 libclang-common-15-dev \
               mpi-default-bin mpi-default-dev ocl-icd-libopencl1 openmpi-bin openmpi-common"
      run: |
        if [ "${{ steps.cache-dependencies.outputs.cache-hit }}" = "true" ]; then
          mkdir -p ~/.local/lib
          mv ~/.cache/lib/python3* ~/.local/lib
          sudo cp --force --recursive ~/.cache/lib/* /lib
          rm -rf ~/.cache/lib
          sudo cp --force --recursive ~/.cache/* /
          sudo update-alternatives --install /usr/lib/x86_64-linux-gnu/libpsm_infinipath.so.1 libpsm_infinipath.so.1 /usr/lib/libpsm1/libpsm_infinipath.so.1.16 0
          sudo mkdir -p /usr/lib/x86_64-linux-gnu/openmpi/lib/fortran/
          sudo ln -s /usr/lib/x86_64-linux-gnu/openmpi/lib/ /usr/lib/x86_64-linux-gnu/openmpi/lib/fortran/gfortran
        else
          sudo apt-get update && sudo apt-get install -yq `echo $PKGS`
          mkdir -p ~/.cache
          for pkg in `echo $PKGS`; do
              for dep in $pkg; do
                  dpkg -L $dep | while IFS= read -r f; do if test -f $f; then echo $f; fi; done | xargs cp --parents --target-directory ~/.cache/
              done
          done
          pip install --user mpi4py numpy scipy
          rm -rf ~/.cache/pip
          cp -R ~/.local/lib ~/.cache
          find ~/.cache -type d \( -wholename "*/share/doc/*" -o -wholename "*/share/man/*" -o -wholename "*/tests" -o -wholename "*/javascript" \) -prune -exec rm -rf "{}" \;
        fi
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-12 0
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-12 0
        sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/gcov-12 0
        sudo update-alternatives --install /usr/bin/clang++ clang++ /usr/lib/llvm-15/bin/clang++ 0
        sudo update-alternatives --install /usr/bin/clang clang /usr/lib/llvm-15/bin/clang 0
        sudo update-alternatives --install /usr/bin/gfortran gfortran /usr/bin/gfortran-12 0
        sudo update-alternatives --set g++ /usr/bin/g++-12
        sudo update-alternatives --set gcc /usr/bin/gcc-12
        sudo update-alternatives --set gcov /usr/bin/gcov-12
        sudo update-alternatives --set clang++ /usr/lib/llvm-15/bin/clang++
        sudo update-alternatives --set clang /usr/lib/llvm-15/bin/clang
        sudo update-alternatives --set gfortran /usr/bin/gfortran-12
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo -e "MPICXX ?= mpicxx.openmpi \nMPICC ?= mpicc.openmpi\nMPIF90 ?= mpif90.openmpi\n" | cat - Make.inc/Makefile.Actions > Makefile.inc
        else
          echo -e "MPICXX ?= mpicxx.openmpi -fprofile-arcs -ftest-coverage\nMPICC ?= mpicc.openmpi -fprofile-arcs -ftest-coverage\nMPIF90 ?= mpif90.openmpi -fprofile-arcs -ftest-coverage" | cat - Make.inc/Makefile.Actions > Makefile.inc
        fi
    - name: Fetch PETSc and data files
      run: |
        cd .. && git clone --depth 1 -b ${{ needs.variables.outputs.petsc-branch }} --single-branch https://gitlab.com/petsc/petsc.git && cd petsc
        OUTPUT=$(for SRC in ksp/impls/hpddm/hpddm.cxx ksp/impls/hpddm/cuda/hpddm.cu pc/impls/hpddm/pchpddm.cxx;
        do
          diff --suppress-common-lines -y -W 500 src/ksp/${SRC} ../${{ github.event.repository.name }}/interface/petsc/`echo ${SRC} | cut -d'/' -f1,4-` | sed '/LCOV_/d' | if [ $(wc -c) -gt "0" ]; then echo ${SRC} file has diverged; fi
        done)
        if [ ! -z "${OUTPUT}" ]; then printf '%s\n' "${OUTPUT}"; exit 1; fi
        wget -nv http://joliv.et/petsc_datafiles.tar.gz && tar xzf petsc_datafiles.tar.gz
        if [ "${{ steps.cache-dependencies.outputs.cache-hit }}" = "true" ]; then
          cp -r ~/.cache/arch-packages .
        else
          mkdir -p ~/.cache/arch-packages
        fi
    - name: Configure vanilla PETSc with external packages
      run: |
        cd ../petsc
        ./configure --with-x=0 --with-cc=mpicc.openmpi --with-cxx=0 --with-fc=mpif90.openmpi --with-fortran-bindings=0 --with-c2html=0 --download-f2cblaslapack --with-f2cblaslapack-float128-bindings --with-debugging=0 --with-scalapack-lib=/usr/lib/x86_64-linux-gnu/libscalapack-openmpi.so --with-metis-include=/usr/include --with-metis-lib=/usr/lib/x86_64-linux-gnu/libmetis.so --with-parmetis-include=/usr/include --with-parmetis-lib=/usr/lib/libparmetis.so --download-mumps --with-hwloc-include=/usr/include --with-hwloc-lib=/usr/lib/x86_64-linux-gnu/libhwloc.so --with-openmp FOPTFLAGS="-g0 -O3" COPTFLAGS="-g0 -O3" PETSC_ARCH=arch-packages || (cat arch-packages/lib/petsc/conf/configure.log 2> /dev/null; exit 1)
        cp -r arch-packages/lib arch-packages/include ~/.cache/arch-packages
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
    - name: Build and test with MUMPS and single-precision complex scalars
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then export OMPI_CC=clang && export OMPI_CXX=clang++; fi
        export HPDDMFLAGS="-DFORCE_SINGLE -DFORCE_COMPLEX"
        make python
        make test_c test_cpp test_python
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          lcov --directory . --capture --output-file coverage1.info
        fi
        make clean
    - name: Build and test with BoomerAMG
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then export OMPI_CC=clang && export OMPI_CXX=clang++; fi
        export HPDDMFLAGS="-DGENERAL_CO -DHPDDM_NUMBERING=\'F\'"
        export SOLVER=HYPRE
        make python
        make test_c test_cpp test_python test_bin/driver test_bin/custom_operator_c test_bin/schwarzFromFile_cpp
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          export OMPI_FC=gfortran
          make test_fortran
        fi
        if [ "${{ matrix.compiler }}" = "gcc" ]; then
          lcov --directory . --capture --output-file coverage2.info
        fi
        make clean
    - name: Build and test with mixed-precision arithmetic
      run: |
        export HPDDMFLAGS="-DHPDDM_NUMBERING=\'F\' -DHPDDM_MIXED_PRECISION=1"
        make test_cpp
        lcov --directory . --capture --output-file coverage3.info
        make clean
      if: matrix.compiler == 'gcc'
    - name: Build and test with PETSc and SLEPc
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then export OMPI_CC=clang && export OMPI_CXX=clang++
        else export COVERAGE_FLAGS="-fprofile-arcs -ftest-coverage"; fi
        cd ../petsc
        export REPOSITORY_NAME=${{ github.event.repository.name }}
        bash ../${REPOSITORY_NAME}/.github/workflows/aldaas2021robust.sh
        bash ../${REPOSITORY_NAME}/.github/workflows/algebraic.sh
        export PETSC_DIR=`pwd`
        export PETSC_ARCH=arch-ci
        export DATAFILESPATH=`pwd`/datafiles
        export INCS="-I`pwd`/../${REPOSITORY_NAME}/include"
        export TYPE=double
        export INT64=0
        export SUBSOLVER=PETSC
        export LD_LIBRARY_PATH_0=${LD_LIBRARY_PATH}
        sed -i -e 's=$(PETSC_COMPILE.cxx) $(abspath $<) -o $@=$(PETSC_COMPILE.cxx) $(subst impls/hpddm/,,$(subst petsc/src/ksp,'"${REPOSITORY_NAME}"'/interface/petsc,$(abspath $<))) -o $(subst impls/hpddm/,,$(subst obj/src/ksp,../../'"${REPOSITORY_NAME}"'/interface/petsc,$@))=;s=$(call quiet,CLINKER) $(sl_linker_args) -o $@ $^ $(PETSC_EXTERNAL_LIB_BASIC)=$(call quiet,CLINKER) $(sl_linker_args) -o $@ $(filter-out %hpddm.o,$^) $(filter-out arch-ci/obj/src/ksp/%,$(filter %hpddm.o,$^)) $(subst impls/hpddm/,,$(patsubst arch-ci/obj/src/ksp/%,../'"${REPOSITORY_NAME}"'/interface/petsc/%,$(filter arch-ci/obj/src/ksp/%,$(filter %hpddm.o,$^)))) $(PETSC_EXTERNAL_LIB_BASIC)=;s=$(SHARED_RECIPE_ATFILE)=$(SHARED_RECIPE_DEFAULT)=' gmakefile
        sed -i -e 's=starttime: pre-clean $(libpetscall)=starttime: pre-clean=;s=$(testexe.c) $(testexe.cu) : $(TESTDIR)/% : $(TESTDIR)/%.o $$^ $(libpetscall)=$(testexe.c) $(testexe.cu) : $(TESTDIR)/% : $(TESTDIR)/%.o $$^=;s=$(call quiet,CLINKER) $(EXEFLAGS) -o $@ $^ $(PETSC_TEST_LIB=$(call quiet,CLINKER) $(EXEFLAGS) -o $@ $^ $(libpetscall) $(PETSC_TEST_LIB=g' gmakefile.test
        for PRECISION in single double __float128
        do
          for TYPE in complex real
          do
            for INT64 in 1 0
            do
              if [ "$INT64" = "1" ] && { { [ "$TYPE" = "complex" ] && [ "$PRECISION" = "double" ]; } || { [ "$TYPE" = "real" ] && [ "$PRECISION" = "single" ]; } }; then continue; fi
              if [ "$PRECISION" = "__float128" ] && { { [ "$TYPE" = "complex" ] || [ "$INT64" = "1" ]; } || [ "${{ matrix.compiler }}" != "gcc" ]; }; then continue; fi
              unset HPDDMFLAGS
              unset EXTERNALPACKAGES
              export PETSC_CXXPPFLAGS="-Wall -Wextra -Wextra-semi -Wpedantic -Wno-sign-compare -Wno-cast-function-type"
              if [ "${{ matrix.compiler }}" = "clang" ]; then
                export PETSC_CXXPPFLAGS="${PETSC_CXXPPFLAGS} -Wextra-semi-stmt"
              fi
              if [ "$PRECISION" != "__float128" ]; then
                export EXTERNALPACKAGES="--with-scalapack-lib=/usr/lib/x86_64-linux-gnu/libscalapack-openmpi.so --with-mumps-include=arch-packages/include --with-mumps-lib=[${PETSC_DIR}/arch-packages/lib/libcmumps.a,libdmumps.a,libzmumps.a,libsmumps.a,libmumps_common.a,libpord.a,/usr/lib/x86_64-linux-gnu/libmetis.so,/usr/lib/libparmetis.so,/usr/lib/gcc/x86_64-linux-gnu/12/libgomp.so]"
                if [ "${{ matrix.compiler }}" = "gcc" ]; then export EXTERNALPACKAGES="${EXTERNALPACKAGES} --with-hwloc-include=/usr/include --with-hwloc-lib=/usr/lib/x86_64-linux-gnu/libhwloc.so --with-openmp"; fi
                export PETSC_CXXPPFLAGS="${PETSC_CXXPPFLAGS} -DPETSC_SKIP_ATTRIBUTE_MAY_ALIAS -Werror"
              fi
              if [ "$PRECISION" = "double" ]; then
                export EIGENSOLVER=SLEPC
              else
                unset EIGENSOLVER
              fi
              if [ "$INT64" = "0" ]; then
                if [ "$PRECISION" = "double" ]; then
                  export EXTERNALPACKAGES="${EXTERNALPACKAGES} --with-metis-include=/usr/include --with-metis-lib=/usr/lib/x86_64-linux-gnu/libmetis.so --with-parmetis-include=/usr/include --with-parmetis-lib=/usr/lib/libparmetis.so --download-htool"
                  if [ "$TYPE" = "real" ]; then
                    export EXTERNALPACKAGES="${EXTERNALPACKAGES} --download-triangle --download-suitesparse"
                  fi
                fi
                if [ "${{ matrix.compiler }}" = "gcc" ] && [ "$TYPE" = "real" ]; then
                  export EXTERNALPACKAGES="${EXTERNALPACKAGES} --with-f2cblaslapack-dir=`pwd`/arch-packages LDFLAGS=-L`pwd`/arch-packages/lib"
                fi
              fi
              ./configure --with-x=0 --with-fortran-bindings=0 --with-cc=mpicc.openmpi --with-cxx=mpicxx.openmpi --with-fc=mpif90.openmpi --with-mpiexec=mpirun.openmpi --download-slepc --download-hpddm=../${REPOSITORY_NAME} --download-hpddm-commit=HEAD 'CXXPPFLAGS=${PETSC_CXXPPFLAGS}' --with-64-bit-indices=${INT64} --with-scalar-type=${TYPE} --with-precision=${PRECISION} ${EXTERNALPACKAGES} || (cat ${PETSC_ARCH}/lib/petsc/conf/configure.log 2> /dev/null; exit 1)
              [ -z "`diff -rq ${PETSC_ARCH}/include ../${REPOSITORY_NAME}/include | grep -v Only`" ] || exit 1
              rm -rf ${PETSC_ARCH}/include/HPDDM* && sed -i -e 's@petsc/arch-ci/externalpackages/git.hpddm@${REPOSITORY_NAME}@g' -e 's@hpddm_petsc.cpp@hpddm_petsc.cpp ${COVERAGE_FLAGS} -I`pwd`/../`echo ${REPOSITORY_NAME}`/include@' ${PETSC_ARCH}/lib/petsc/conf/petscrules
              if [ "$INT64" = "0" ] && [ "$TYPE" = "real" ] && [ "$PRECISION" = "double" ] && [ "${{ matrix.compiler }}" = "gcc" ]; then
                make all "CXX=mpicxx.openmpi ${COVERAGE_FLAGS} ${INCS}" "CLINKER=mpicc.openmpi ${COVERAGE_FLAGS} -fopenmp" || (cat ${PETSC_ARCH}/externalpackages/git.slepc/${PETSC_ARCH}/lib/slepc/conf/configure.log 2> /dev/null; cat ${PETSC_ARCH}/lib/petsc/conf/hpddm.log 2> /dev/null; exit 1)
              else
                make all "CXX=mpicxx.openmpi ${COVERAGE_FLAGS} ${INCS}" "CLINKER=mpicc.openmpi ${COVERAGE_FLAGS}" || (cat ${PETSC_ARCH}/externalpackages/git.slepc/${PETSC_ARCH}/lib/slepc/conf/configure.log 2> /dev/null; cat ${PETSC_ARCH}/lib/petsc/conf/hpddm.log 2> /dev/null; exit 1)
              fi
              cat ${PETSC_ARCH}/lib/petsc/conf/hpddm.log
              make -f gmakefile test 'query=requires' 'queryval=*hpddm*' 'PETSCMPIEXEC=mpirun.openmpi --oversubscribe --mca btl_base_warn_component_unused 0' "CC=mpicc.openmpi ${COVERAGE_FLAGS}" "CLINKER=mpicc.openmpi ${COVERAGE_FLAGS}" TIMEOUT=120 EXTRA_OPTIONS='-malloc_dump' check-test-errors
              config/report_tests.py -t 5 -s
              if [ "$PRECISION" = "double" ] && [ "$TYPE" = "real" ] && [ "$INT64" = "0" ]; then
                cd arch-ci/externalpackages/git.slepc
                mkdir -p arch-ci/tests
                echo 'echo eps_tests-test43_1 svd_tutorials-ex48_4_hpddm' > arch-ci/tests/echofailures.sh
                chmod u+x arch-ci/tests/echofailures.sh
                make -f gmakefile test test-fail='1' PETSC_ARCH=arch-ci PETSC_DIR=${PETSC_DIR} SLEPC_DIR=${PETSC_DIR}/${PETSC_ARCH}/externalpackages/git.slepc 'PETSCMPIEXEC=mpirun.openmpi --oversubscribe --mca btl_base_warn_component_unused 0' "CC=mpicc.openmpi ${COVERAGE_FLAGS}" "CLINKER=mpicc.openmpi ${COVERAGE_FLAGS}" EXTRA_OPTIONS='-malloc_dump' check-test-errors && cd ../../../
                if [ "${{ matrix.compiler }}" = "gcc" ]; then
                  mkdir -p ../install/lib
                  mv arch-ci/lib/libhpddm_petsc.so arch-ci/lib/libslepc.so* ../install/lib
                  echo 'echo ksp_ksp_tutorials-ex72_hpddm_gen_non_hermitian' > arch-ci/tests/echofailures.sh
                  chmod u+x arch-ci/tests/echofailures.sh
                  make -f gmakefile test test-fail='1' PETSC_ARCH=arch-ci PETSC_DIR=${PETSC_DIR} SLEPC_DIR=${PETSC_DIR}/../install 'PETSCMPIEXEC=mpirun.openmpi --oversubscribe --mca btl_base_warn_component_unused 0' "CC=mpicc.openmpi ${COVERAGE_FLAGS}" "CLINKER=mpicc.openmpi ${COVERAGE_FLAGS}" EXTRA_OPTIONS='-malloc_dump' check-test-errors
                  mv ../install/lib/libhpddm_petsc.so ../install/lib/libslepc.so* arch-ci/lib
                  rm -rf ../install
                fi
              fi
              if [ "$PRECISION" = "single" ]; then export HPDDMFLAGS="-DFORCE_SINGLE"; fi
              if [ "$TYPE" = "complex" ]; then export HPDDMFLAGS="${HPDDMFLAGS} -DFORCE_COMPLEX"; fi
              cd ../${REPOSITORY_NAME}
              export LD_LIBRARY_PATH=${LD_LIBRARY_PATH_0}:${PETSC_DIR}/${PETSC_ARCH}/lib
              if [ "$PRECISION" != "__float128" ]; then make cpp; fi
              if [ "${{ matrix.compiler }}" = "gcc" ]; then
                if [ "$PRECISION" != "__float128" ]; then make test_cpp; fi
                lcov --directory . --directory ../petsc/arch-ci/lib --exclude '/tmp/*' --capture --output-file coverage_${PRECISION}_${TYPE}_${INT64}.info
              fi
              make clean
              cd ../petsc && rm -rf ${PETSC_ARCH}
            done
          done
        done
    - uses: actions/upload-artifact@v3
      with:
        path: coverage*.info
      if: matrix.compiler == 'gcc'
  nvcc:
    timeout-minutes: 120
    needs:
      - variables
    runs-on: ${{ matrix.runs_on }}
    strategy:
      matrix: ${{ fromJson(needs.variables.outputs.matrix) }}
    steps:
    - name: Fetch PETSc and data files
      run: |
        rm -rf petsc ${{ github.event.repository.name }} petsc_datafiles.tar.gz coverage_nvcc.info
        git clone --depth=1 -b ${{ needs.variables.outputs.petsc-branch }} https://gitlab.com/petsc/petsc.git
        git clone --depth=1 -b ${{ needs.variables.outputs.hpddm-branch }} git@github.com:${{ github.repository }}
        wget -nv http://joliv.et/petsc_datafiles.tar.gz && tar xzf petsc_datafiles.tar.gz
      if: matrix.runs_on != 'ubuntu-latest'
    - name: Build and test with PETSc and SLEPc
      run: |
        cd petsc
        export COVERAGE_FLAGS="-fprofile-arcs -ftest-coverage"
        export PETSC_DIR=`pwd`
        export PETSC_ARCH=arch-ci
        export DATAFILESPATH=`pwd`/../datafiles
        export PETSC_CXXPPFLAGS="-Wall -Wextra -Wextra-semi -Wno-sign-compare -Wno-cast-function-type"
        export REPOSITORY_NAME=${{ github.event.repository.name }}
        bash ../${REPOSITORY_NAME}/.github/workflows/algebraic.sh
        sed -i -e 's=$(PETSC_COMPILE.cxx) $(abspath $<) -o $@=$(PETSC_COMPILE.cxx) $(subst impls/hpddm/,,$(subst petsc/src/ksp,'"${REPOSITORY_NAME}"'/interface/petsc,$(abspath $<))) -o $(subst impls/hpddm/,,$(subst obj/src/ksp,../../'"${REPOSITORY_NAME}"'/interface/petsc,$@))=;s=$(PETSC_COMPILE.cu) $(abspath $<) -o $@=$(PETSC_COMPILE.cu) $(subst impls/hpddm/,,$(subst petsc/src/ksp/ksp,'"${REPOSITORY_NAME}"'/interface/petsc/ksp,$(abspath $<))) -o $(subst impls/hpddm/,,$(subst obj/src/ksp/ksp,../../'"${REPOSITORY_NAME}"'/interface/petsc/ksp,$@))=;s=$(call quiet,CLINKER) $(sl_linker_args) -o $@ $^ $(PETSC_EXTERNAL_LIB_BASIC)=$(call quiet,CLINKER) $(sl_linker_args) -o $@ $(filter-out %hpddm.o,$^) $(filter-out arch-ci/obj/src/ksp/%,$(filter %hpddm.o,$^)) $(subst impls/hpddm/,,$(patsubst arch-ci/obj/src/ksp/%,../'"${REPOSITORY_NAME}"'/interface/petsc/%,$(filter arch-ci/obj/src/ksp/%,$(filter %hpddm.o,$^)))) $(PETSC_EXTERNAL_LIB_BASIC)=;s=$(SHARED_RECIPE_ATFILE)=$(SHARED_RECIPE_DEFAULT)=' gmakefile
        sed -i -e 's=starttime: pre-clean $(libpetscall)=starttime: pre-clean=;s=$(testexe.c) $(testexe.cu) : $(TESTDIR)/% : $(TESTDIR)/%.o $$^ $(libpetscall)=$(testexe.c) $(testexe.cu) : $(TESTDIR)/% : $(TESTDIR)/%.o $$^=;s=$(call quiet,CLINKER) $(EXEFLAGS) -o $@ $^ $(PETSC_TEST_LIB=$(call quiet,CLINKER) $(EXEFLAGS) -o $@ $^ $(libpetscall) $(PETSC_TEST_LIB=g' gmakefile.test
        echo ::add-mask::${{ secrets.HOSTNAME }}
        echo ::add-mask::${{ secrets.LOGIN }}
        export INCS="-I`pwd`/../${REPOSITORY_NAME}/include"
        ./configure --with-strict-petscerrorcode --with-mpi-dir=/local/${{ secrets.LOGIN }}/petsc/arch-linux-c-opt \
                    --with-hwloc-dir=/local/${{ secrets.LOGIN }}/petsc/arch-linux-c-opt \
                    --with-blaslapack-lib=[/local/${{ secrets.LOGIN }}/lib/libmkl_core.so,/local/${{ secrets.LOGIN }}/lib/libmkl_intel_lp64.so,/local/${{ secrets.LOGIN }}/lib/libmkl_sequential.so] \
                    --with-blaslapack-include=/local/${{ secrets.LOGIN }}/include --with-mkl_pardiso \
                    --with-c2html=0 --with-fc=0 --download-slepc \
                    --download-hpddm=../${{ github.event.repository.name }} --download-hpddm-commit=HEAD \
                    --with-cuda --download-thrust 'CXXPPFLAGS=${PETSC_CXXPPFLAGS}' 'CUDAFLAGS=--compiler-options -Wall,-Wno-psabi,-Werror ${INCS}'
        [ -z "`diff -rq ${PETSC_ARCH}/include ../${REPOSITORY_NAME}/include | grep -v Only`" ] || exit 1
        rm -rf ${PETSC_ARCH}/include/HPDDM* && sed -i -e 's@petsc/arch-ci/externalpackages/git.hpddm@${REPOSITORY_NAME}@g' -e 's@hpddm_petsc.cpp@hpddm_petsc.cpp ${COVERAGE_FLAGS} -I`pwd`/../`echo ${REPOSITORY_NAME}`/include@' ${PETSC_ARCH}/lib/petsc/conf/petscrules
        rm -rf /local/${{ secrets.LOGIN }}/petsc/arch-linux-c-opt/include/HPDDM*
        make all "CXX=/local/${{ secrets.LOGIN }}/petsc/arch-linux-c-opt/bin/mpicxx ${COVERAGE_FLAGS} ${INCS}" "CLINKER=/local/${{ secrets.LOGIN }}/petsc/arch-linux-c-opt/bin/mpicc ${COVERAGE_FLAGS} -fopenmp" "CUDA_CXXFLAGS=${COVERAGE_FLAGS} ${INCS} -fvisibility=hidden"
        cat ${PETSC_ARCH}/lib/petsc/conf/hpddm.log
        export LD_PRELOAD="`pwd`/arch-ci/lib/libpetsc.so `pwd`/arch-ci/lib/libslepc.so"
        make check
        make -f gmakefile test 'query=requires' 'queryval=*hpddm*' "CC=/local/${{ secrets.LOGIN }}/petsc/arch-linux-c-opt/bin/mpicc ${COVERAGE_FLAGS}" "CLINKER=/local/${{ secrets.LOGIN }}/petsc/arch-linux-c-opt/bin/mpicc ${COVERAGE_FLAGS}" EXTRA_OPTIONS='-malloc_dump' check-test-errors || exit 1
        config/report_tests.py -t 5 -s
        cd ../${REPOSITORY_NAME}
        ~/lcov-1.16/bin/lcov --directory . --directory ../petsc/arch-ci/lib --exclude '/tmp/*' --capture --output-file ../coverage_nvcc.info
      if: matrix.runs_on != 'ubuntu-latest'
    - uses: actions/upload-artifact@v3
      with:
        path: coverage_nvcc.info
      if: matrix.runs_on != 'ubuntu-latest'
  post-main:
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs:
      - main
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.cancelWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            })
  post-nvcc:
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    needs:
      - nvcc
    steps:
      - uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.cancelWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId
            })
  coverage:
    runs-on: ubuntu-latest
    if: ${{ success() }}
    needs: [ main, nvcc ]
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v3
      - name: Merge and upload coverage reports
        run: |
          if [ -d $PWD/artifact ]; then
            sudo apt-get install -yq lcov
            find . -name "coverage*.info" -exec echo -a {} \; | xargs lcov -o coverage.info
            lcov --remove coverage.info '/usr/*' '*petsc/arch*' --output-file coverage.info > /dev/null
            if [ "${{ github.event.repository.name }}" = "hpddm" ]; then
              bash <(curl -s https://codecov.io/bash) -f coverage.info
            fi
          elif [ "${{ github.event.repository.name }}" = "hpddm" ]; then
            exit 1
          fi
